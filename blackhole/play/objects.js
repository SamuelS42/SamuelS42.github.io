// Generated by CoffeeScript 1.10.0
//
//Full source at https://github.com/SamuelS42/BlackHole
//
var Game, Hole;

Hole = (function() {
  function Hole(n) {
    this.number = n;
    this.element = document.getElementById("hole" + n);
    this.rownum = parseInt(this.element.parentNode.id[3]);
    this.filled = false;
    this.pieceNum = 0;
    this.owner = "hole";
  }

  Hole.prototype.getTouching = function(holelist) {
    var e, j, k, len, len1, num, otherhole, r, ref, ref1, result;
    e = this.number;
    r = this.rownum;
    result = [];
    ref = [e + r - 1, e + r, e - r - 1, e - r];
    for (j = 0, len = ref.length; j < len; j++) {
      num = ref[j];
      otherhole = holelist[num];
      if ((otherhole != null) && (otherhole.rownum === r - 1 || otherhole.rownum === r + 1)) {
        result.push(otherhole);
      }
    }
    ref1 = [e - 2, e];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      num = ref1[k];
      otherhole = holelist[num];
      if ((otherhole != null) && otherhole.rownum === r) {
        result.push(otherhole);
      }
    }
    return result;
  };

  Hole.prototype.fill = function(player, num) {
    this.element.classList.add("piece-" + num, "filled", player);
    this.pieceNum = num;
    this.owner = player;
    return this.filled = true;
  };

  Hole.prototype.clear = function() {
    this.element.classList.remove("piece-" + this.pieceNum, "filled", this.owner, "sucked", "blackHole");
    this.pieceNum = 0;
    this.owner = "hole";
    return this.filled = false;
  };

  Hole.prototype.suck = function() {
    return this.element.classList.add("sucked");
  };

  Hole.prototype.blackhole = function() {
    return this.element.classList.add("blackHole");
  };

  return Hole;

})();

Game = (function() {
  function Game() {
    var i, j, k, len, ref;
    this.arena = document.getElementById("gamearea");
    this.holes = [];
    for (i = j = 1; j <= 21; i = ++j) {
      this.holes.push(new Hole(i));
    }
    this.pieces = {};
    ref = ["p1", "p2"];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      this.pieces[i] = [].slice.call(document.getElementsByClassName(i));
    }
  }

  Game.prototype.reset = function() {
    var i, j, p, results;
    results = [];
    for (i = j = 0; j < 10; i = ++j) {
      results.push((function() {
        var results1;
        results1 = [];
        for (p in this.pieces) {
          results1.push(this.pieces[p][i].classList.add("inactive"));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  Game.prototype.start = function(first) {
    if (first == null) {
      first = "p1";
    }
    this.reset();
    this.first = first;
    this.currentplayer = first;
    this.turn = 0;
    this.setTurn(first);
    this.arena.addEventListener("click", this.clickCallback.bind(this));
    this.loop();
    return true;
  };

  Game.prototype.setTurn = function(player) {
    this.arena.classList.remove("turnp1", "turnp2");
    this.arena.classList.add("turn" + player);
    return this.currentplayer = player;
  };

  Game.prototype.toggleTurn = function() {
    var next;
    next = this.currentplayer === "p2" ? "p1" : "p2";
    this.setTurn(next);
    if (next === this.first) {
      this.turn += 1;
    }
    return next;
  };

  Game.prototype.clickCallback = function(e) {
    if (e.target.classList.contains("hole") && this.turn !== "hole") {
      this.dropPiece(e.target);
      return true;
    }
    return false;
  };

  Game.prototype.dropPiece = function(target) {
    var h;
    h = this.holes[parseInt(/\d{1,2}/.exec(target.id)[0]) - 1];
    if (!h.filled) {
      this.pieces[this.currentplayer][this.turn].classList.add("used");
      h.fill(this.currentplayer, this.turn + 1);
      this.toggleTurn();
      return this.loop();
    }
  };

  Game.prototype.pickUpPiece = function() {
    return this.pieces[this.currentplayer][this.turn].classList.remove("inactive");
  };

  Game.prototype.blackHole = function() {
    var bh, h, j, len, ref, values;
    this.turn = "hole";
    bh = this.holes.find(function(h) {
      return !h.filled;
    });
    bh.blackhole();
    ref = bh.getTouching(this.holes);
    for (j = 0, len = ref.length; j < len; j++) {
      h = ref[j];
      h.suck();
    }
    values = bh.getTouching(this.holes).reduce((function(p, c) {
      p[c.owner] += c.pieceNum;
      return p;
    }), {
      "p1": 0,
      "p2": 0
    });
    return values;
  };

  Game.prototype.end = function() {
    var m, v;
    v = this.blackHole();
    if (v["p1"] < v["p2"]) {
      m = "Left player won!";
    }
    if (v["p1"] > v["p2"]) {
      m = "Right player won!";
    }
    if (v["p1"] === v["p2"]) {
      m = "Tie game.";
    }
    return alert(m);
  };

  Game.prototype.loop = function() {
    if (this.turn === 10) {
      this.end();
      return true;
    }
    this.pickUpPiece();
    return false;
  };

  return Game;

})();
